/**
 * Tarusho.Server
 * Tarusho server API reference
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Transfer} from 'ionic-native'
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import {ApiConfig} from "../config";

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class ImageApi {
    protected basePath = ApiConfig.apiPath;
    get defaultHeaders() : Headers { return ApiConfig.defaultHeaders };

    constructor(protected http: Http) {
    }

    /**
     * ObjectTagの画像をセットします
     * 
     * @param id 設定したいObjectTagのId
     * @param itemUri 設定したいImageのUri
     */
    public imagesObjectTagsIdPut (id: string, itemUri: string, extraHttpRequestParams?: any ) : Promise<{}> {
        const path = this.basePath + '/images/object_tags/{id}'
            .replace('{' + 'id' + '}', String(id));

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling imagesObjectTagsIdPut.');
        }
        // verify required parameter 'item' is not null or undefined
        if (itemUri === null || itemUri === undefined) {
            throw new Error('Required parameter item was null or undefined when calling imagesObjectTagsIdPut.');
        }

        return new Transfer().upload(itemUri, path)
    }

    /**
     * ユーザー画像を更新します
     * 
     * @param itemUri 設定したいImageのUri
     */
    public myUpdateProfileImagePut (itemUri: string, extraHttpRequestParams?: any ) : Promise<{}> {
        const path = this.basePath + '/my/update_profile_image';
        // verify required parameter 'item' is not null or undefined
        if (itemUri === null || itemUri === undefined) {
            throw new Error('Required parameter item was null or undefined when calling myUpdateProfileImagePut.');
        }

        return new Transfer().upload(itemUri, path)
    }

}
